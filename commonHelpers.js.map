{"version":3,"file":"commonHelpers.js","sources":["../src/js/01-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'flatpickr/dist/themes/material_red.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst inputDateRef = document.querySelector('#datetime-picker');\nconst btnStartRef = document.querySelector('[data-start]');\nconst timerValueRef = document.querySelectorAll('.value');\n\nbtnStartRef.disabled = true;\nbtnStartRef.addEventListener('click', onStartsCountdownTimer);\n\nconst [days, hours, minutes, seconds] = timerValueRef;\nlet userSelectedDate = '';\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  enableSeconds: true,\n  dateFormat: 'd.m.Y H:i',\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0].getTime() > Date.now()) {\n      btnStartRef.disabled = false;\n    } else {\n      btnStartRef.disabled = true;\n      iziToast.error({\n        position: 'topRight',\n        messageColor: 'brown',\n        message: 'Please choose a date in the future',\n        timeout: 3000,\n      });\n    }\n    userSelectedDate = selectedDates[0].getTime();\n  },\n};\n\nflatpickr(inputDateRef, options);\n\nfunction onStartsCountdownTimer() {\n  btnStartRef.disabled = true;\n  inputDateRef.disabled = true;\n\n  const intervalId = setInterval(() => {\n    const dateDifference = userSelectedDate - Date.now();\n\n    days.textContent = addLeadingZero(convertMs(dateDifference).days);\n    hours.textContent = addLeadingZero(convertMs(dateDifference).hours);\n    minutes.textContent = addLeadingZero(convertMs(dateDifference).minutes);\n    seconds.textContent = addLeadingZero(convertMs(dateDifference).seconds);\n\n    if (dateDifference < 1000) {\n      clearInterval(intervalId);\n      inputDateRef.disabled = false;\n    }\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["inputDateRef","btnStartRef","timerValueRef","onStartsCountdownTimer","days","hours","minutes","seconds","userSelectedDate","options","selectedDates","iziToast","flatpickr","intervalId","dateDifference","addLeadingZero","convertMs","ms","value"],"mappings":"+IAMA,MAAMA,EAAe,SAAS,cAAc,kBAAkB,EACxDC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAgB,SAAS,iBAAiB,QAAQ,EAExDD,EAAY,SAAW,GACvBA,EAAY,iBAAiB,QAASE,CAAsB,EAE5D,KAAM,CAACC,EAAMC,EAAOC,EAASC,CAAO,EAAIL,EACxC,IAAIM,EAAmB,GAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,cAAe,GACf,WAAY,YACZ,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,GAAG,QAAO,EAAK,KAAK,MACpCT,EAAY,SAAW,IAEvBA,EAAY,SAAW,GACvBU,EAAS,MAAM,CACb,SAAU,WACV,aAAc,QACd,QAAS,qCACT,QAAS,GACjB,CAAO,GAEHH,EAAmBE,EAAc,GAAG,QAAO,CAC5C,CACH,EAEAE,EAAUZ,EAAcS,CAAO,EAE/B,SAASN,GAAyB,CAChCF,EAAY,SAAW,GACvBD,EAAa,SAAW,GAExB,MAAMa,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAiBN,EAAmB,KAAK,IAAG,EAElDJ,EAAK,YAAcW,EAAeC,EAAUF,CAAc,EAAE,IAAI,EAChET,EAAM,YAAcU,EAAeC,EAAUF,CAAc,EAAE,KAAK,EAClER,EAAQ,YAAcS,EAAeC,EAAUF,CAAc,EAAE,OAAO,EACtEP,EAAQ,YAAcQ,EAAeC,EAAUF,CAAc,EAAE,OAAO,EAElEA,EAAiB,MACnB,cAAcD,CAAU,EACxBb,EAAa,SAAW,GAE3B,EAAE,GAAI,CACT,CAEA,SAASgB,EAAUC,EAAI,CAMrB,MAAMb,EAAO,KAAK,MAAMa,EAAK,KAAG,EAC1BZ,EAAQ,KAAK,MAAOY,EAAK,MAAO,IAAI,EACpCX,EAAU,KAAK,MAAQW,EAAK,MAAO,KAAQ,GAAM,EACjDV,EAAU,KAAK,MAASU,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAb,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASQ,EAAeG,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}